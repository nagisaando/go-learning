package utils

import (
	"time"

	"github.com/golang-jwt/jwt/v5"
)

const secretKey = "supersecret"

func GenerateToken(email string, userId int64) (string, error) {
	// first argument =>
	// identifier of the signin approach that should be used. it will be checked if the token was generated by this server etc

	// ES256
	// it is a signing method for JWTs that uses two keys: one to sign (create) the token and another to verify it.
	// Why two keys? => it is called asymmetric encryption. it is more secure of certain application
	// because the signing key (private key) can be kept secret while verifying key (public key) can be shared openly
	// for example HS256, one shared secret key is used for both signing and verifying. It is simpler but might be less secure if that one key is exposed

	token := jwt.NewWithClaims(jwt.SigningMethodES256, jwt.MapClaims{
		"email":  email,
		"userId": userId,
		"exp":    time.Now().Add(time.Hour * 2).Unix(),
	})

	return token.SignedString(secretKey)
}
